# -*- coding: utf-8 -*-
"""Replication CheXNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-S1WhqiqsChuWVGjunT_5CIGdlV-kHO3
"""

# Commented out for local run
"""
from google.colab import drive
drive.mount('/content/drive')
"""

"""You want to use the full path for Colab"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/DL4H Project/replication/images_converted/
# Commented out for local run
"""
!(ls | wc -l)
"""
# %cd /content/drive/My Drive/DL4H Project/replication

"""Yes, there is some dups in the dataset, but it does not affect"""

import os
import gc
import random
import time; _START_RUNTIME = time.time()
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.backends.cudnn as cudnn
import torchvision
import torchvision.transforms as transforms

from PIL import Image
from sklearn.metrics import roc_auc_score
from torch.utils.data import Dataset
from torch.utils.data import DataLoader



N_LABEL = 14
LABELS = ["Atelectasis","Cardiomegaly", "Effusion", "Infiltration", "Mass", 
               "Nodule", "Pneumonia", "Pneumothorax", "Consolidation", "Edema", 
               "Emphysema", "Fibrosis", "Pleural_Thickening", "Hernia"]
DATA_PATH = './images_converted/'
#DATA_PATH = '/content/drive/My Drive/DL4H Project/replication/images_converted/'
BATCH_SIZE = 16
N_EPOCH = 1
PRINT_INTERVAL = 50
"""BATCH_SIZE -> 8 is way better than 16 in Colab"""



def collate_fn(data):
    image_path, label = zip(*data)
    image_tensors = torch.Tensor()
    trans = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize(mean = [0.485, 0.456, 0.406],
                                     std = [0.229, 0.224, 0.225])
                ])
    for img in image_path:
        img_pil = Image.open(img).convert("RGB")
        img_tensor = trans(img_pil).unsqueeze(0)
        image_tensors = torch.cat((image_tensors, img_tensor))
    label_tensors = torch.FloatTensor(label)

    return image_tensors.cuda(), label_tensors.cuda()

class XrayDataSet(Dataset):
    def __init__(self, data_path, image_list):
        self.image_path = []
        self.y=[]
        f = open(image_list, "r")
        for line in f:
            l = line.strip("\n").split(" ")
            self.image_path.append(data_path+l[0])
            label = [int(x) for x in l[1:]]
            self.y.append(label)
        f.close()
    def __len__(self):
        return(len(self.image_path))
    def __getitem__(self, index):
        return(self.image_path[index], self.y[index])

class DenseNet121(nn.Module):
    """
    The last layer of DenseNet121 was replaced by a Linear with 14 output features, followed by a sigmoid function
    """
    def __init__(self, out_feature):
        super(DenseNet121, self).__init__()
        self.densenet121 = torchvision.models.densenet121(pretrained=True)
        in_features = self.densenet121.classifier.in_features
        self.densenet121.classifier = nn.Sequential(
            nn.Linear(in_features, out_feature),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = self.densenet121(x)
        return x

def train_model(model, train_loader, n_epochs = 1):
    t1 = time.time()
    criterion = nn.BCELoss()
    """using Adam with standard parameters (B1 = 0.9 and B2 = 0.999) """
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
    """factor (float) â€“ Factor by which the learning rate will be reduced. new_lr = lr * factor. Default: 0.1."""
    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1,
                                               patience=10, verbose=False, threshold=0.0001,
                                               threshold_mode='rel', cooldown=0, min_lr=0, eps=1e-08)
    
    # prep model for training
    model.train()

    train_loss_arr = []
    print("Started training, total epoch : {}".format(n_epochs))
    print("Training data size: {}".format(len(train_loader)))
    for epoch in range(n_epochs):
        gc.collect()
        torch.cuda.empty_cache()
        train_loss = 0
        batch = 0
        print("Started epoch {}".format(epoch+1))
        for x, y in train_loader:
            optimizer.zero_grad()
            y_hat = model(x)
            loss = criterion(y_hat, y)
            loss.backward()
            optimizer.step()
            train_loss += loss.item()
            if (batch % PRINT_INTERVAL == 0):
                print('Trained {} batches \tTraining Loss: {:.6f}'.format(batch, loss.item()))
            batch += 1

        train_loss = train_loss / len(train_loader)
        scheduler.step(train_loss)
        
        train_loss_arr.append(np.mean(train_loss))
        print('Epoch: {} \tTraining Loss: {:.6f}'.format(epoch+1, train_loss))

    t2 = time.time()
    print("Training time lapse: {} min".format((t2 - t1) // 60))

def eval_model(model, test_loader):
    # initialize the y_test and y_pred tensor
    y_test = torch.FloatTensor()
    y_test = y_test.cuda()
    y_pred = torch.FloatTensor()
    y_pred = y_pred.cuda()
    print("Evaluating test data...\t test_loader: {}".format(len(test_loader)))
    t1 = time.time()
    for i, (x, y) in enumerate(test_loader):
        y = y.cuda()
        y_test = torch.cat((y_test, y), 0)
        _, channel, height, width= x.size()
        with torch.no_grad():
            x_in = torch.autograd.Variable(x.view(-1, channel, height, width).cuda())
        y_hat = model(x_in)
        y_pred = torch.cat((y_pred, y_hat), 0)
        if (i % PRINT_INTERVAL == 0):
            print("batch: {}".format(i))
    t2 = time.time()
    print("Evaluating time lapse: {} min".format((t2 - t1) // 60))
    
    """Compute AUROC for each class"""
    AUROCs = []
    y_test_np = y_test.cpu().detach().numpy()
    y_pred_np = y_pred.cpu().detach().numpy()
    for i in range(N_LABEL):
        result = roc_auc_score(y_test_np[:, i], y_pred_np[:, i])
        AUROCs.append(result)

    AUROC_avg = np.array(AUROCs).mean()
    print('The average AUROC is {AUROC_avg:.3f}'.format(AUROC_avg=AUROC_avg))
    for i in range(N_LABEL):
        print('The AUROC of {} is {}'.format(LABELS[i], AUROCs[i]))





"""Now, let's run"""

# CUDA stats
print(torch.cuda.device_count())
print(torch.cuda.get_device_name(0))

# cudnn will look for the optimal set of algorithms for that particular configuration (which takes some time). 
# This usually leads to faster runtime.
cudnn.benchmark = True

# initialize and load the model
model = DenseNet121(N_LABEL).cuda()

# Small sample for debug purpose. Commented out for full training

train_dataset = XrayDataSet(DATA_PATH, "train_val_sample10k.txt")
test_dataset = XrayDataSet(DATA_PATH, "test_sample1k.txt")

"""
train_dataset = XrayDataSet(DATA_PATH, "labeled_train_val_list.txt")
test_dataset = XrayDataSet(DATA_PATH, "labeled_test_list.txt")
"""
train_loader = DataLoader(dataset=train_dataset, batch_size=BATCH_SIZE, shuffle=True, collate_fn=collate_fn)
test_loader = DataLoader(dataset=test_dataset, batch_size=BATCH_SIZE, shuffle=False, collate_fn=collate_fn)

train_model(model, train_loader, n_epochs=N_EPOCH)

"""No need to use GPU for calculating AUC"""
gc.collect()
torch.cuda.empty_cache()
# switch to evaluate mode
model.eval()
with torch.no_grad():
    eval_model(model, test_loader)